{"version":3,"file":"index-es.min.js","sources":["../src/iframePost.js","../src/SharedStorage.js"],"sourcesContent":["export const iframePost = (iframeSource, msgObj, {\n  origin = new URL(iframeSource).origin,\n  loaded\n} = {}) => {\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n  iframe.addEventListener('load', (e) => {\n    if (loaded) {\n      loaded(e);\n    }\n    iframe.contentWindow.postMessage(msgObj, origin);\n    // iframe.remove(); // Won't receive message back (in Firefox or Chrome)\n  });\n  iframe.src = iframeSource;\n  document.body.append(iframe);\n};\n","import {iframePost} from './iframePost.js';\n\n// This is for user API (to be built-in to the browser but as module for now)\nconst iframeSource = 'http://localhost:8051'; // 'https://shared-storage.org';\nconst promises = {};\nlet id = 1;\nconst iframePostPromise = (msgObj) => {\n  return new Promise((resolve, reject) => {\n    iframePost(iframeSource, Object.assign(msgObj, {id, isSharedStorage: true}));\n    promises[id++] = {resolve, reject};\n  });\n};\n\nwindow.addEventListener('message', (e) => {\n  if (!e.data.id) {\n    return;\n  }\n  if (e.data.status === 'error') {\n    promises[e.data.id].reject(e.data);\n  } else {\n    promises[e.data.id].resolve(e.data);\n  }\n});\n\nexport const get = async ({namespace, namespacing}) => {\n  return iframePostPromise({\n    namespacing,\n    namespace\n  });\n};\nexport const getMaxRemaining = async () => {\n  return iframePostPromise({\n    getMaxRemaining: true\n  });\n};\nexport const set = async ({data, namespace, namespacing}) => {\n  return iframePostPromise({\n    namespacing,\n    namespace,\n    data\n  });\n};\n"],"names":["iframePost","iframeSource","msgObj","origin","URL","loaded","iframe","document","createElement","style","display","addEventListener","e","contentWindow","postMessage","src","body","append","promises","id","iframePostPromise","Promise","resolve","reject","Object","assign","isSharedStorage","window","data","status","get","async","namespace","namespacing","getMaxRemaining","set"],"mappings":"AAAO,MAAMA,WAAa,CAACC,EAAcC,GACvCC,OAAAA,EAAS,IAAIC,IAAIH,GAAcE,OAC/BE,OAAAA,GACE,YACIC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAMC,QAAU,OACvBJ,EAAOK,iBAAiB,OAASC,IAC3BP,GACFA,EAAOO,GAETN,EAAOO,cAAcC,YAAYZ,EAAQC,KAG3CG,EAAOS,IAAMd,EACbM,SAASS,KAAKC,OAAOX,ICXjBL,aAAe,wBACfiB,SAAW,GACjB,IAAIC,GAAK,EACT,MAAMC,kBAAqBlB,GAClB,IAAImB,QAAQ,CAACC,EAASC,KAC3BvB,WAAWC,aAAcuB,OAAOC,OAAOvB,EAAQ,CAACiB,GAAAA,GAAIO,iBAAiB,KACrER,SAASC,MAAQ,CAACG,QAAAA,EAASC,OAAAA,KAI/BI,OAAOhB,iBAAiB,UAAYC,IAC7BA,EAAEgB,KAAKT,KAGU,UAAlBP,EAAEgB,KAAKC,OACTX,SAASN,EAAEgB,KAAKT,IAAII,OAAOX,EAAEgB,MAE7BV,SAASN,EAAEgB,KAAKT,IAAIG,QAAQV,EAAEgB,SAIlC,MAAaE,IAAMC,OAAQC,UAAAA,EAAWC,YAAAA,KAC7Bb,kBAAkB,CACvBa,YAAAA,EACAD,UAAAA,IAGSE,gBAAkBH,SACtBX,kBAAkB,CACvBc,iBAAiB,IAGRC,IAAMJ,OAAQH,KAAAA,EAAMI,UAAAA,EAAWC,YAAAA,KACnCb,kBAAkB,CACvBa,YAAAA,EACAD,UAAAA,EACAJ,KAAAA"}