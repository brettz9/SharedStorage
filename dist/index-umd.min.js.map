{"version":3,"file":"index-umd.min.js","sources":["../src/iframePost.js","../src/SharedStorage.js"],"sourcesContent":["export const iframePost = (iframeSource, msgObj, {\n  origin: orign = new URL(iframeSource).origin,\n  loaded\n} = {}) => {\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n  iframe.addEventListener('load', (e) => {\n    if (loaded) {\n      loaded(e);\n    }\n    iframe.contentWindow.postMessage(msgObj, orign);\n    // iframe.remove(); // Won't receive message back (in Firefox or Chrome)\n  });\n  iframe.src = iframeSource;\n  document.body.append(iframe);\n};\n","import {iframePost} from './iframePost.js';\n\n// This is for user API (to be built-in to the browser but as module for now)\nconst iframeSource = 'https://unpkg.com/sharedstorage/index.html'; // 'http://localhost:8051'; // 'https://shared-storage.org';\nconst promises = {};\nlet id = 1;\nconst iframePostPromise = (msgObj) => {\n  // eslint-disable-next-line promise/avoid-new\n  return new Promise((resolve, reject) => {\n    iframePost(\n      iframeSource,\n      Object.assign(msgObj, {id, isSharedStorage: true})\n    );\n    promises[id++] = {resolve, reject};\n  });\n};\n\nwindow.addEventListener('message', (e) => {\n  if (!e.data.id) {\n    return;\n  }\n  if (e.data.status === 'error') {\n    promises[e.data.id].reject(e.data);\n  } else {\n    promises[e.data.id].resolve(e.data);\n  }\n});\n\nwindow.SharedStorage = {\n  /* async */ get ({namespace, namespacing}) {\n    return iframePostPromise({\n      namespacing,\n      namespace\n    });\n  },\n  /* async */ getMaxRemaining () {\n    return iframePostPromise({\n      getMaxRemaining: true\n    });\n  },\n  /* async */ set ({data, namespace, namespacing}) {\n    return iframePostPromise({\n      namespacing,\n      namespace,\n      data\n    });\n  }\n};\n"],"names":["promises","id","iframePostPromise","msgObj","Promise","resolve","reject","iframeSource","origin","orign","URL","loaded","iframe","document","createElement","style","display","addEventListener","e","contentWindow","postMessage","src","body","append","iframePost","Object","assign","isSharedStorage","window","data","status","SharedStorage","get","namespace","namespacing","getMaxRemaining","set"],"mappings":"2FAAO,MCIDA,EAAW,GACjB,IAAIC,EAAK,EACT,MAAMC,EAAqBC,GAElB,IAAIC,QAAQ,CAACC,EAASC,KDRL,EAACC,EAAcJ,GACvCK,OAAQC,EAAQ,IAAIC,IAAIH,GAAcC,OACtCG,OAAAA,GACE,YACIC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAMC,QAAU,OACvBJ,EAAOK,iBAAiB,OAASC,IAC3BP,GACFA,EAAOO,GAETN,EAAOO,cAAcC,YAAYjB,EAAQM,KAG3CG,EAAOS,IAAMd,EACbM,SAASS,KAAKC,OAAOX,ICLnBY,CANiB,6CAQfC,OAAOC,OAAOvB,EAAQ,CAACF,GAAAA,EAAI0B,iBAAiB,KAE9C3B,EAASC,KAAQ,CAACI,QAAAA,EAASC,OAAAA,KAI/BsB,OAAOX,iBAAiB,UAAYC,IAC7BA,EAAEW,KAAK5B,KAGU,UAAlBiB,EAAEW,KAAKC,OACT9B,EAASkB,EAAEW,KAAK5B,IAAIK,OAAOY,EAAEW,MAE7B7B,EAASkB,EAAEW,KAAK5B,IAAII,QAAQa,EAAEW,SAIlCD,OAAOG,cAAgB,CACTC,IAAG,EAAEC,UAACA,EAADC,YAAYA,KACpBhC,EAAkB,CACvBgC,YAAAA,EACAD,UAAAA,IAGQE,gBAAe,IAClBjC,EAAkB,CACvBiC,iBAAiB,IAGTC,IAAG,EAAEP,KAACA,EAADI,UAAOA,EAAPC,YAAkBA,KAC1BhC,EAAkB,CACvBgC,YAAAA,EACAD,UAAAA,EACAJ,KAAAA"}